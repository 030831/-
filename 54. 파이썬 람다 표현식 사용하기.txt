#람다 표현식 사용하기

람다 표현식은 식 형태로 되어있다고 해서 람다표현식이라고 부름.
람다 표현식은 함수를 간편하게 작성할수있어서 
다른함수의 인수로 넣을때 사용함


#람다 표현식으로 함수 만들기

def plus(x):
	return x+10
plus(1)

11이 출력됨.

lambda에 매개변수를 지정하고 :(콜론)뒤에 반환값으로 사용할 식을 지정함.

lambda 매개변수들:식

lambda x:x+1

이 상태로는 함수를 호출 할 수 없음.
람다 표현식은 이름이 없는 함수를 만들기 때문임
람다 표현식을 익명함수라고 부르기도함.
lambda로 만든 익명 함수를 호출할려면 람다 표현식을 변수에 할당하면 됨.

plus=lambda x:x+10
plus(1) 입력시
11이 출력이 됨.

매개변수 x를 하나 받고 x+10을 반환한다는 뜻임.


def plus(x): <- lambda x에 해당
	retrun x+10 <- x+10에 해당

#람다 표현식 자체를 호출하기

(lambda x:x+10)(1) 입력시
11이 출력됨

#람다 표현식 안에서는 변수를 만들 수 없음.
반환값 부분은 변수 없이 식 한 줄로 표현할수 있어야함.
변수가 필요한 코드일경우는 def 함수를 작성하는 것이 좋음.

(lambda x:y=10; x+y)(1) 입력시 오류가 뜸

하지만
y=10
(lambda x:x+y)(1) 은 가능함.

#def 와 람다 표현식 비교

def plus(x):
	return x+10
print( list(map(plus,[1,2,3])))

[11,12,13] 이 출력됨

하지만 람다 표현식을 사용하면

print( list(map(lambda x:x+10 , [1,2,3] ) ) ) 이렇게 한줄로 표현가능함.

