#데코레이터 만들기

데코레이터는 장식하다 , 꾸미다라는 뜻의 decorate에 er(or)을 붙인 말인데
장식하는 도구 정도로 설명할 수 있음.

클래스에서 메서드를 만들떄 @staticmethod, @classmethod , @abstractmethod 등을 붙였는데
이렇게 @로 시작하는 것들이 데코레이터임

함수(메서드)를 장식한다고 해서 이런 이름이 붙었ㅇ,ㅁ.

class Calc:
	@staticmethod #데코레이터
	def add(a,b):
		print(a+b)

데코레이터는 함수를 수정하지 않은 상태에서 추가 기능을 구현할 때 사용함


def trace(func):
	def wrapper():
		print(func.__name__,'함수시작)
		func()
		print(func.__name__,'함수 끝')

	return wrapper


def hello():
	print('hello')

def world():
	print('world')

trace_hello=trace(hello)
trace_hello()
trace_world=trace(world)
trace_world()

@데코레이터
def 함수이름():
	코드 



def trace(func):
	def wrapper():
		print(func.__name__,'함수시작)
		func()
		print(func.__name__,'함수 끝')

	return wrapper

@trace
def hello():
	print('hello')

@trace
def world():
	print('world')


hello()
world()

hello  함수 시작
hello
hello 함수 끝
world 함수 시작
world
world 함수 끝 <- 출력이 됨.

def hello <- 함수 이름을 def trace인 매개변수로 받아서 func가 hello가 됨.


