#코루틴을 종료하고 예외 처리하기


코루틴은 실행상태를 유지하기 위해 while True:를 사용해서 끝나지 않는 무한루프로 동작함
코루틴을 강제로 종료하고 싶다면 close 메서드를 사용함


def number_coroutine():
	while True:
		x=(yield)
		print(x,end=' ')

co=number_coroutine()
next(co)

for i in range(20):
	co.send(i)

co.close() #코루틴 종료

0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 <- 출력이 됨.


def number_coroutine():
	try:

		while True:
			x=(yield)
			print(x,end=' ')
	except GemeratorExit:
		print()
		print('코루틴 종료')


co=number_coroutine()
next(co)

for i in range(20):
	co.send(i)

co.close() 
코루틴 객체에서 close 메서드를 호출하면 코루틴이 종료될 때  GemeratorExit 예외가 발생함
이 예외를 처리하면 코루틴의 종료 시점을 알 수 있음.


#코루틴 안에서 예외 발생시키기

코루틴 안에 예외를 발생시킬때는 throw 메서드를 사용함.
throw메서드에 지정한 에러메세지는 except as의 변수에 들어감.

코루틴객체.throw(예외이름, 에러메세지)


def sum_coroutine():
	try:
		total=0
		while True:
			x=(yield)
			total+=x
		
	except RuntimeError as e:
		print(e)
		yield total #코루틴 바깥으로 값 전달

co=sum_coroutine()
next(co)

for i in range(20:
	co.send(i)
print(co.throw(RuntimeError,'예외로 코루틴 끝내기' ) ) 

실행시

예외로 코루틴끝내기
190 <- 출력이 됨.

