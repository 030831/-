#문자열 바꾸기


문자열을 바꿀 때는 sub함수를 사용하며
패턴 , 바꿀문자열 , 문자열 , 바꿀횟수를 넣어줌

바꿀횟루를 넣어주면 지정된 횟수만큼 바꾸며 바꿀횟수를 생략하면
찾은 문자열을 모두 바꿈

re.sub('패턴' , '바꿀문자열' , '문자열 ' , 바꿀횟수)를 사용함

re.sub('apple|orange' , 'fruit' , 'apple box orange three' ) #apple 또는 orange를 fruit로 바꿈
'fruit box fruit three' 가 출력이 됨.


re.sub( '[0-9]+' , 'n' , '1 2 Fizz 4 Buzz 7 8 ' ) #숫자만 찾아서 n으로 바꿈
'n n Fizz n Buzz n n ' 이 출력이 됨.


sub 함수는 바꿀 문자열 대신 교체 함수를 지정할 수 도 있음.
교체함수는 매개변수로 매치 객체를 받으며 바꿀 결과를 문자열로 반환하면 됨.
당므은 문자열에서 숫자를 찾은 뒤 숫자를 10배로 만듬

교체함수(매치객체)
re.sub('패턴' , 교채함수 , '문자열' , 바꿀횟수)


def multiple10(m):
	n=int(m.group())
	return str(n*10)

re.sub(' [0-9]+ ' , mutiple10 , '1 2 Fizz 4 Buzz Fizz 7 8 ' )
입력시

'10 20 Fizz 40 Buzz Fizz 70 80' 이 출력이 됨.

교체 함수가 내용이 간단하면 람다를 써도됨.

re.sub(' [0-9]+ ' , lambda m:str(int(m.group() ) * 10 ) , '1 2 Fizz 4 Buzz Fizz 7 8 ' )

#찾은 문자열을 결과에 다시 사용하기

바꿀문자열에서 \\숫자형식으로 매칭된 문자열을 가져와서 사용할 수 있음.

re.sub( " ( [a-z]+ ) ([0-9]+) ' , " \\2 \\1 \\2 \\1 ' , ;hello 1234' )입력시
"1234 hello 1234 hello" 가 출력이 됨.


re.sub( " ( {\s*)"(\w+)" : \s*"(\w+)"(\s*})" , " <\\2>\\3></\\2>' , '{ "name" : "james" } ' ) , 입력시
'<name>james</name>' 가 출력이 됨.


#\s은 공백을 의미함.
첫번째 (\w+)에 name이 들어감
두번쨰 (\w+)에 james가 들어감

따라서 '{ "name" : "james" } '  에서
{ 부분이 1
"name"부분이 2
"james"부분이 3
} 부분이 4가 됨


만약 그룹에 이름을 지었다면 \\g<이름> 형식으로 매칭된 문자열을 가져올수 있음.

re.sub( ' ({\s*)"(?p<key>\w+)":\s*"(?p<value>\w+)"(\s*})' , ' <\\g<key>\\g<value></\\g<key>>',
'{ "name": "james" } ' ) 입력시

'<name>james</name? ' 가 출력이 됨.

name가 key james가 value임
\\g<key>가 호출 명령어임.









