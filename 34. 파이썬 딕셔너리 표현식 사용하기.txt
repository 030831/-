#딕셔너리 표현식 사용하기

딕셔너리도 for 반복문과 if 조건문을 사용하여 딕셔너리를 만들수 있음

keys= {'a' , ''b' , 'c' , 'd' }

x= { key: value for key,value in dict.fromkeys(keys).items() }
x 입력시

{'a' : None , 'b' : None , 'c' : None , 'd' : None}

또는

x={ key: value for key,value in dict.fromkeys(keys).items() }

순서는
items()로 딕셔너리의 키-값 쌍을 구하고
키와 값을 하나씩 꺼냄.

key만 가져온뒤 특정 값을 넣거나 values 로 값을 가져온 뒤 값을 키로 사용할 수 있음.

{key: 0 for key in dict.fromkeys([ 'a' , 'b' , 'c' , 'd']).keys() }
{'a' : 0 , 'b' : 0 , 'c': 0 , 'd' : 0} 이 출력됨

또는

{ value: 0 for value in {'a' : 10 , 'b' : 20 , 'c' : 30 , 'd' : 40}.values() }
입력시
{10:0 , 20:0 , 30:0 , 40:0 } 이 출력이 됨

키와 값의 자리를 바꾸는 등 여러가지로 응용할수 있음

{value: key for key,value in {'a' : 10  , 'b' : 20 , 'c' : 30 , 'd' : 40}.items() } 입력시
{10:'a' , 20:'b' , 30: 'c' , 40 : 'd' } 가 출력됨

#딕셔너리 표현식에서 if 조건문 사용하기

x= { 'a' : 10 , 'b' : 20 , 'c' : 30 , 'd' : 40 } 

for key,value in x.items():
	if value == 20:
	del x[key]
print(x) 

이러면 딕셔너리의 크기가 변하므로 오류가 발생함.
따라서 딕셔너리는 반복문으로 키-값 쌍을 삭제하면 안되미

if조건문을  사용하여 삭제할 값을 제외해야함

x= { 'a' : 10 , 'b' : 20 , 'c' : 30 , 'd' : 40 } 
x={ key : value for key,value in x.items() if value != 20 }
입력시
x 입력시

{'a' : 10 , 'c' : 30 , 'd' : 40 } 이 출력이 됨