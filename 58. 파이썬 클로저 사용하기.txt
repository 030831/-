#클로저 사용하기

다음은 함수 바깥쪽에 있는 지역변수 a,b를 사용하여 a*x+b를 계산하는
함수 mul_add를 만든 뒤에 함수 mul_add 자체를 반환함.

def f():
	a=3
	b=5
	def mul_add(x):
		return a*x+b # 3*인수+5를 반환함.
	return mul_add

c=f()
print( c(1), c(2), c(3), c(4), c(5) )

8,11,14,17,20이 출력이 됨


#클로저 사용하기

그 다음에 함수 mul_add에서 a와 b를 사용하여 a*x+b를 계산한뒤 반환함.

def f():
	a=3
	b=5
	def mul_add(x):
		return a*x+b

함수를 반환할때는 함수 이름만 반환해야 하며 , 괄호를 붙이면 안됨.

함수를 둘러싼 환경(지역변수,코드 등)을 계속 유지하다가
함수를 호출할때 다시 꺼내서 사용하는 함수를 클로저라고 함.



클로저를 사용하면 프로그램의 흐름을 변수에 저장 할 수 있음
클로저는 지역 변수와 코드를 묶어서 사용하고 싶을때 활용함.
클로저에 속한 지역 변수는 바깥에서 직접 접근할수 없으므로 데이터를 숨기고 싶을때 활용함

#람다 표현식을 통해 클로저 만들기

def f():
	a=3
	b=5
	retrun lambda x:a*x+b
c=f()
print( c(1) , c(2) , c(3) , c(4), c(5) )

람다 표현식을 사용하면 클로저가 훨씬 더 간단해짐.

보통 클로저는 람다와 자주 같이 씀.

람다는 이름이 없는 익명 함수를 뜻하고 , 클로저는 함수를 둘러싼 환경을 유지했다가
나중에 다시 사용하는 함수를 뜻함.


#클로저의 지역변수를 변경하기

def f():
	a=3
	b=5
	total=0
	def mul_add(x):
		nonlocal total
		total=total+a*x+b
		print(total)
	return mul_add

c=f()
c(1)
c(2)
c(3)

8
19 (8+11)
33 (19+14)
이 출력이 됨.