#집합 연산 사용하기

#합집합 OR

세트1 | 세트2

a= { 1,2,3,4}
b= {3,4,5,6}

a|b 또는 set.union(a,b) 입력시

{1,2,3,4,5,6} 이 출력됨

#교집합 &

a&b 또는 set.intersection(a,b)
입력시 교집합이 출력됨


#차집합 -

a-b 또는
set.difference(a,b) 입력시
{1.2} 출력

#집합 연산 사용하기 ^

XOR은 ^을 사용함

대칭 차집합을 의미함

서로 다른것만 표시함

a^b  또는
set.symmetric_difference(a,b) 입력시
{1,2,5,6} 이 출력이 됨

#집합 연산자와 할당 연산자 사용하기

a= { 1, 2, 3, 4}
a|={5} 또는
a.update({5}) 입력시
{1,2,3,4,5}가 출력됨

a={1,2,3,4}
a&= {0,1,2,3,4} 또는
a.intersection_update({0,1,2,3,4}) 입력시
{1,2,3,4}만 출력됨

a={1,2,3,4}
a-={3} 또는
a.difference_update({3}) 입력시
{1 , 2 , 4 } 만 출력


a={1,2,3,4}
a^={3,4,5,6} 또는
a.symmetric_difference_update({3,4,5,6}) 입력시
{1,2,5,6}이 출력이 됨

#부분집합과 상위집합 확인하기

a={1,2,3,4}
a<={1,2,3,4} 입력시
True
또는
a.issubset({1,2,3,4,5}) 입력시
True , 즉 부분집합임을 의미함

#진부분집합

부분집합이지만 같은 집합이 아닐때 참임

a={1,2,3,4}
a<{1,2,3,4,5}
True가 출력됨
a<{1,2,3,4}
False가 출력됨

#상위 집합

a={1,2,3,4}
a>={1,2,3,4} 입력시
True 출력 또는
a.issuperset({1,2,3,4}) 입력시
True

issuperset 와 같은 명령어를 메서드라고 함 ( . 으로 구분)

#진 상위집합

a={1,2,3,4}
a>{1,2,3} 일때
True 이고 진 상위집합의 메서드는 따로 없음

#세트가 같은지 다른지 확인하기

a={1,2,3,4}
a=={1,2,3,4} 입력시
True
a={4,3,2,1} 입력시
True

a={1,2,3,4}
a!={1,2,3} 입력시
True

세트는 요소의 순서가 정해져 있지않음.

#세트가 겹치지 않는지 확인하기

a={1,2,3,4}
a.isdisjoint({5,6,7,8})
True
a.isdisjoint({3,4,5,6}) 
False