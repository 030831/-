#키워드 인수와 딕셔너리 언패킹 사용하기

다음과 같이 딕셔너리 앞에 ** (애스터리스크 2개)를 붙여서 함수에넣어줌

def personal(name , age , address):
	print('이름' , name)
	print('나이 ', age)
	print('주소 ' , address)

x={'name' : '홍길동' , 'age' : 30 , ' address' : '서울시 용산구 이촌동'}

이후
personal(**x) 입력시

이름: 홍길동
나이 : 30
주소 : 서울시 용산구 이촌동
이렇게 출력이 됨

딕셔너리 쌍 하나씩 값을 대입하게 됨.

또는

personal( ** {'name' : '홍길동' , 'age' : 30 , ' address' : '서울시 용산구 이촌동'})

이렇게 해도
이름: 홍길동
나이 : 30
주소 : 서울시 용산구 이촌동
정상 출력이 됨

이때 함수의 매개변수 이름과 딕셔너리의 키 이름이 같아야 함.
매개변수 개수와 딕셔너리의 키의 개수 또한 같아야함

# **를 두번 사용하는 잉유

딕셔너리는 ** 처럼 *를 두번 사용하는 이유는
키-값 쌍 형태로 값이 저장되어 있기 때문임
먼저 * 하나만 쓰면

이름 : name
나이 : age
주소 : address 만 출력이 됨

딕셔너리를 한번만 언패킹하면 키만 사용한다는 뜻이 됨

#키워드 인수를 사용하는 가변 인수 함수를 만들기

def personal(**kwargs):
	for kw,arg in kwargs.items():
		print(kw, ':' , arg,sep='')

매개변수의 이름은 아무거나 지워도 되지만
관례적으로 keyword arguments 를 줄여서 kwargs 라고 주로 씀

personal(name='홍길동') 입력시

name: 홍길동 <- 출력이 됨

또는

personal(name=' 홍길동 ' , age=30)
name: 홍길동
age:30

즉 , 개수를 마음대로 해도 정상적으로 출력이 됨.

또는

x={'name' : '홍길동' }
personal( ** x ) 이렇게 출력도 가능함.

x의 개수 또한 확장가능

#특정 키가 있는지 확인

def personal(**kwargs):
	if 'name' in kwargs:
		print(' 이름 ' , kwargs['name'])
	if 'age' in kwargs"
		print(' 나이 ' , kwargs['age'])
	if 'address' in kwargs:
		print('주소 ' , kwargs['address'])
